{"version":3,"sources":["components/FriendCard.jsx","utils/hooks.js","App.js","reportWebVitals.js","index.js"],"names":["FriendCard","props","className","CardBody","name","disabled","loading","onClick","toggleFavourite","favourite","handleDelete","id","defaultProps","useDebounce","value","delay","useState","debouncedValue","setDebouncedValue","useEffect","handler","setTimeout","clearTimeout","apiURL","App","setValue","sortOrderBy","setSortOrderBy","data","setData","setLoading","totalCount","setTotalCount","currentPage","setCurrentPage","searchTerm","setSearchTerm","isSearching","setIsSearching","debouncedSearchTerm","axios","get","then","res","items","getFriends","count","friend","put","delete","Container","Row","Col","lg","md","sm","InputGroup","Input","placeholder","type","onChange","e","target","InputGroupAddon","addonType","InputGroupText","onKeyPress","event","newFriend","rating","key","post","map","length","size","firstPageText","previousPageText","lastPageText","nextPageText","totalItems","pageSize","onSelect","i","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4b9c939b.chunk.js","sourcesContent":["import React from 'react';\nimport PropTypes from 'prop-types';\nimport {\n  CardBody,\n} from 'reactstrap';\n\n\nconst FriendCard = props => (\n    <div className=\"main-card-container\">\n      <CardBody className=\"main-card\">\n        <div className=\"title-container\">\n          <strong>{props.name}</strong>\n          <div>is your friend</div>\n        </div>\n\n        <div className=\" w-25 d-flex justify-content-around\">\n          <button className=\"icon-button\" disabled={props.loading} onClick={\n                () => props.toggleFavourite(props)\n              }>\n            {props.favourite ? (\n              <i className=\"star fa fa-star \" />) : (\n              <i className=\"star fa fa-star-o\"/>\n            )}\n          </button>\n          <button className=\"icon-button\" disabled={props.loading}>\n            <i className=\" trash fa fa-trash\" onClick={\n              () => props.handleDelete(props.id)\n            } />\n          </button>\n        </div>\n      </CardBody>\n    </div>\n);\n\nFriendCard.propTypes = {\n  name: PropTypes.string,\n  favourite: PropTypes.bool,\n};\nFriendCard.defaultProps = {\n  name: 'default name',\n  favourite: false,\n};\n\nexport default FriendCard;\n","import { useState, useEffect } from \"react\";\n\n\n// Hook\nfunction useDebounce(value, delay) {\n  // State and setters for debounced value\n  const [debouncedValue, setDebouncedValue] = useState(value);\n  useEffect(\n    () => {\n      // Update debounced value after delay\n      const handler = setTimeout(() => {\n        setDebouncedValue(value);\n      }, delay);\n      // Cancel the timeout if value changes (also on delay change or unmount)\n      // This is how we prevent debounced value from updating if value is changed ...\n      // .. within the delay period. Timeout gets cleared and restarted.\n      return () => {\n        clearTimeout(handler);\n      };\n    },\n    [value, delay] // Only re-call effect if value or delay changes\n  );\n  return debouncedValue;\n}\n\nexport default useDebounce;","import { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport './App.scss';\nimport FriendCard from './components/FriendCard';\nimport PaginationComponent from 'react-reactstrap-pagination';\nimport { Row, Container, Input, Col, InputGroupText, InputGroupAddon, InputGroup } from 'reactstrap';\nimport useDebounce from './utils/hooks';\n\n\n// API URL\nconst apiURL = `https://60e1c1015a5596001730f1f1.mockapi.io/friends`\nconst pageSize = 4;\n\nfunction App() {\n\n  const [value, setValue] = useState(\"\");\n  const [sortOrderBy, setSortOrderBy] = useState(false);\n  const [data, setData] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [totalCount, setTotalCount] = useState(0);\n  const [currentPage, setCurrentPage] = useState(1);\n  // for Search Functionality\n  const [searchTerm, setSearchTerm] = useState(\"\");\n  const [isSearching, setIsSearching] = useState(false);\n  const debouncedSearchTerm = useDebounce(searchTerm, 500);\n\n\n  // Effect for API call\n  useEffect(\n    () => {\n      if (debouncedSearchTerm) {\n        setIsSearching(true);\n        setCurrentPage(1);\n        axios.get(`${apiURL}?page=${currentPage}&limit=${pageSize}&search=${debouncedSearchTerm}&sortBy=favourite&order=${sortOrderBy ? 'asc' : 'desc'}`)\n          .then(res => {\n            setIsSearching(false);\n            setData(res.data.items)\n          });\n      } else {\n        getFriends();\n        setIsSearching(false);\n      }\n    },\n    [debouncedSearchTerm, currentPage] // Only call effect if debounced search term changes\n  );\n\n  const handleSort = () => {\n    setCurrentPage(1);\n    setSortOrderBy(!sortOrderBy);\n    axios.get(`${apiURL}?page=${currentPage}&limit=${pageSize}&search=${debouncedSearchTerm}&sortBy=favourite&order=${sortOrderBy ? 'asc' : 'desc'}`)\n      .then(res => {\n        setData(res.data.items)\n      });\n  }\n\n  const getFriends = () => {\n    axios.get(`${apiURL}?page=${currentPage}&limit=${pageSize}&search=${debouncedSearchTerm}`)\n      .then(res => {\n        setTotalCount(res.data.count);\n        setData(res.data.items);\n        setLoading(false);\n      });\n  }\n\n  const handleKeyPress = (event, type) => {\n\n    const newFriend = {\n      name: event.target.value,\n      rating: false,\n    };\n\n    if (event.key === 'Enter') {\n      setLoading(true);\n\n      axios.post(`${apiURL}`, newFriend)\n        .then(res => {\n          getFriends()\n          setValue('')\n          setSearchTerm('')\n        });\n\n    }\n  };\n\n  const toggleFavourite = (friend) => {\n    setLoading(true);\n\n    const favourite = !friend.favourite;\n    axios.put(`${apiURL}/${friend.id}`, { favourite })\n      .then(() => getFriends());\n  }\n\n  const handleDelete = (id) => {\n    axios.delete(`${apiURL}/${id}`)\n      .then(() => getFriends());\n\n  }\n\n  const handleSetCurrentPage = (e, i) => {\n    setCurrentPage(e);\n  }\n\n  return (\n\n    <Container  >\n      <Row className=\"m-0 p-3 mw-100\">\n        <Col className=\"m-auto\" lg={12} md=\"9\" sm=\"12\">\n\n          {/* Render Input to search new friend   */}\n          <InputGroup\n            className=\"input-field\"\n          >\n            <Input placeholder=\"Search Friend Name\"\n              name=\"search-field\"\n              type=\"search\"\n              value={searchTerm}\n              onChange={(e) => setSearchTerm(e.target.value)}\n            />\n            <InputGroupAddon addonType=\"append\">\n              <InputGroupText>\n\n                {isSearching ? <i className=\"fa fa-spinner fa-spin\" /> : <i className=\" fa fa-search\" />}\n\n\n              </InputGroupText>\n            </InputGroupAddon>\n          </InputGroup>\n\n          <br />\n\n          <center>Sort by your {sortOrderBy ? 'Friend' : 'Favourite Friend'} &nbsp; &nbsp; <button className=\"icon-button\" onClick={handleSort}>\n            {sortOrderBy ? (\n              <i className=\"star fa fa-star \" />) : (\n              <i className=\"star fa fa-star-o\" />\n            )}\n          </button>\n          </center>\n        </Col>\n      </Row>\n      <Row className=\"app-container\">\n        <Col className=\"m-auto\" lg={6} md=\"9\" sm=\"12\">\n\n          <InputGroup\n            // className=\"search-field\"\n            className=\"input-field\"\n          >\n            <Input\n              placeholder=\"Enter Friend Name\"\n              // className=\"friend-field\"\n              name=\"friend-field\"\n              onKeyPress={handleKeyPress}\n              onChange={(e) => setValue(e.target.value)}\n              value={value}\n            />\n            <InputGroupAddon addonType=\"append\">\n              <InputGroupText>\n\n                {loading ? <i className=\"fa fa-spinner fa-spin\" /> : <i className=\" fa fa-user\" />}\n              </InputGroupText>\n            </InputGroupAddon>\n          </InputGroup>\n\n\n\n\n\n          {/* Render cards */}\n          {data.map(friend =>\n            <FriendCard\n              {...friend}\n              key={friend.id}\n              toggleFavourite={toggleFavourite}\n              handleDelete={handleDelete}\n              loading={loading}\n            />)}\n\n\n\n          {totalCount > 4 && data.length ?\n            <PaginationComponent size=\"sm\" firstPageText={'<<'} previousPageText={\"<\"}\n              lastPageText={'>>'}\n              nextPageText={'>'} className=\"pagination-container\" totalItems={totalCount} pageSize={pageSize} onSelect={handleSetCurrentPage} />\n            : null\n          }\n        </Col>\n      </Row>\n    </Container>\n\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}